interfaces: Tetris, Pendu, Flappy

opti Tetris

changer les rêgles dans tous les jeux avec des labels

afficher les lettres déjà entréees Pendu ~

Faire le changement du minesweeper au niveau du score

Space invaders/ arkanoid/ asteroid/ doodle jump/ tron/

mettre tous les jeux 1vs1

future lointain: faire les jeux 1vs1 en réseau avec requette d'ami exemple

augmenter le nombre de possibilités dans les questions et l'accès plus simple aux différents scoreboard


#########################################################

Faire les scrollars savoir si on veut des graphes perso ou général pour le jeu, type de graphes, axes, (dans cet ordre)

liste arguments:

_________________________________
#donnees pour la temperature
grille = np.zeros((20, 20), dtype = int)

for cle,valeur in a[1].items():
    #for i in range(valeur):
    grille[abs(cle[1]-19)][cle[0]]+= valeur

_________________________________
# données pour les bulles
x = []
y = []
a = get_statistics()

for cle,valeur in a[1].items():
    for i in range(valeur):
        x.append(cle[0]+1)
        y.append(abs(cle[1]-20))

for cle,valeur in a[0].items():
    print(cle, valeur)

____________________________________

players = []
for player in get_score_list():
    players.append(player[0])

max_score = []
for player in get_score_list():
    max_score.append(player[1])
____________________________________

x = []
y = []
for players in get_game_score_list('Flappy'):
    x.append(players[0])
    y.append(players[1])


[{'Tete': {'moyenne': [0.0, 3], 'player_count': {'dodo': 2, 'Gwendal': 1}},
'Pendu': {'moyenne': [0, 0], 'player_count': {}}, 'Ghost': {'moyenne': [0, 0], 'player_count': {}},
'Space': {'moyenne': [0, 0], 'player_count': {}},
'Snake': {'moyenne': [254.54545454545453, 44], 'player_count': {'Thomas': 1, 'Romain': 1, 'Camille': 1, 'd': 5, 'Gwendal': 17, 'Hugo': 7, 'dodo': [1, 840], 'sophie': 1, 'Stan': 1, 'Paul': 1, 'Marie': 1}},
'Minesweeper': {'moyenne': [715.625, 32], 'player_count': {'dodo': 15, 'f': 3, 'g': 1, 'd': 8, 'Gwendal': 5}},
'Tetris': {'moyenne': [216.0, 1], 'player_count': {'Stan': 1}},
'Pong': {'moyenne': [0, 0], 'player_count': {}},
'Flappy': {'moyenne': [78.26086956521738, 23], 'player_count': {'Pierre': 2, 'f': 9, 'd': 2, 'Gwendal': 2, 'paul': 1, 'dodo': 3, 'sophie': 1, 'gaetan': 2, 'hugpo': 1}}},
{(17, 0): 1, (0, 0): 6, (9, 14): 1, (19, 19): 2, (19, 6): 1, (8, 11): 1, (19, 13): 1, (19, 4): 2, (0, 18): 1, (19, 15): 1, (8, 19): 1, (0, 16): 1, (13, 19): 1, (19, 0): 1, (1, 0): 1, (18, 10): 1, (6, 19): 1, (9, 0): 2, (10, 16): 1, (0, 19): 3, (9, 9): 1, (19, 5): 1, (0, 17): 2, (7, 19): 2, (0, 11): 1, (5, 0): 1, (10, 0): 1, (19, 10): 4, (0, 2): 1}]

from tkinter import *

sys.path.append("../Reseau")
from Stats.Page_stat import *
from Reseau.client import *

class Stats:
    def __init__(self, user):
        self.user = user
        self.root = Tk()
        self.root.geometry("1000x600")
        self.root.protocol()

        self.titre = Label(self.root, text = "Page de sélection des graphs à afficher")
        self.titre.place(x = 200, y = 20)

        self.games = get_player_score("dodo").keys()
        self.game_ToSend = "Flappy"

        self.listbox_1 = Listbox(self.root)
        self.listbox_1.place(x = 100, y = 60)
        self.listbox_1.insert(END, "Statistiques sur toi")
        self.listbox_1.insert(END, "Statistiques globales")
        self.listbox_1.bind("<ButtonRelease-1>", self.get_variable_1)
        self.selected_mode = 0

        self.listbox_2 = Listbox(self.root)
        self.listbox_2.place(x = 250, y = 60)
        self.listbox_2.insert(END, "Statistiques sur Application")
        self.listbox_2.insert(END, "Statistiques sur jeu")
        self.listbox_2.bind("<ButtonRelease-1>", self.Select_mode)
        self.selected_mode2 = 0

        validate_button = Button(self.root, text = "validate", command = self.launch)
        validate_button.place(x = 500, y = 300)

        self.root.mainloop()

    def get_variable_1(self, event = None):
        a = self.listbox_2.curselection()
        self.selected_mode = self.listbox_1.get(a)
        print(a)
        print(self.selected_mode)

    def Select_mode(self, event = None):
        a  = self.listbox_2.curselection()
        self.selected_mode2 = self.listbox_2.get(a)

        if self.selected_mode2 == "Statistiques sur Application":
            self.listbox_3 = Listbox(self.root)
            self.listbox_3.place(x = 400, y = 60)
            self.listbox_3.insert(END, "stat1")
            self.listbox_3.insert(END, "stat2")
            self.listbox_3.insert(END, "stat3")
            self.listbox_3.insert(END, "stat4")
            self.listbox_3.bind("<ButtonRelease-1>", self.get_variable_3)
        else:
            self.listbox_3_bis = Listbox(self.root)
            self.listbox_3_bis.place(x = 400, y = 60)
            self.listbox_3_bis.insert(END, "tout les jeux")
            for elt in self.games:
                self.listbox_3_bis.insert(END, elt)
            self.listbox_3_bis.bind("<ButtonRelease-1>", self.get_variable_2)

    def get_variable_2(self, event = None):
        a = self.listbox_3_bis.curselection()
        self.selected_mode3 = self.listbox_3_bis.get(a)

    def get_variable_3(self, event = None):
        a = self.listbox_3.curselection()
        self.selected_mode4 = self.listbox_3.get(a)


    def Select_graphType(self, event = None):
        if self.selected_mode == "Statistiques sur toi":
            self.Encore_Une_Autre_Belle_Liste = Listbox(self.root)
            self.Encore_Une_Autre_Belle_Liste.place(x = 500, y = 60)
            self.Encore_Une_Autre_Belle_Liste.insert(END, "Application")
            self.Encore_Une_Autre_Belle_Liste.insert(END, "Thermique")
            self.Encore_Une_Autre_Belle_Liste.bind("<ButtonRelease-1>", self.Select_graphType)
            self.selected_mode = "Application"
        else:
            pass










    def Select_game(self, event = None):
        a  = self.listbox_3.curselection()
        self.game_ToSend = self.listbox_3.get(a)


    def Select_graphType(self, event = None):
        a = self.Encore_Une_Autre_Belle_Liste.curselection()
        self.type_stats = self.Encore_Une_Autre_Belle_Liste.get(a)

    def launch(self):
        print(self.game_ToSend, self.selected_mode)

        if self.selected_mode == "Statistiques sur toi": #si la personne veut un graphique sur elle
            pass

        else: #si la personne veut des stats globales
            if self.type_stats == "Application":
                data = get_statistics()[0]
                moyennes = {}
                total = {}

                for game in data.keys():
                    moyennes[game] = data[game]["moyenne"][0]
                    total[game] = data[game]["moyenne"][1]

            else:
                if self.game_ToSend != "tout les jeux": #si c'est un jeu spécifique
                    x = []
                    y = []
                    for players in get_game_score_list(self.game_ToSend):
                        x.append(players[0])
                        y.append(players[1])

                    Graph_3(self.root,y, x)

                else: #le classement général tout jeux confondus
                    players = []
                    max_score = []
                    for player in get_score_list():
                        players.append(player[0])
                        max_score.append(player[1])


    def show_selected_grap(self):
        pass
